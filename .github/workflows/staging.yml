name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  GO_VERSION: '1.23.3'

jobs:
  # Test First
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêπ Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: üì¶ Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: üì• Download dependencies
      run: go mod download

    - name: üß™ Run tests
      run: go test -v -race ./...

    - name: üèóÔ∏è Test build
      run: go build -v ./...

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'
    environment: staging

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîê Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

    - name: üåê Add staging server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: üìÇ Create staging deployment directory
      run: |
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }} "
          mkdir -p ${{ secrets.STAGING_DEPLOY_PATH }}
        "

    - name: üì§ Copy files to staging server
      run: |
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='coverage.*' \
          --exclude='*.test' \
          --exclude='bin/' \
          ./ ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }}:${{ secrets.STAGING_DEPLOY_PATH }}/


    - name: üöÄ Deploy staging with Docker Compose
      run: |
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }} "
          cd ${{ secrets.STAGING_DEPLOY_PATH }}

          # Stop existing containers
          docker compose down || true

          # Set environment variables from GitHub secrets for staging
          export PORT=${{ secrets.STAGING_PORT || '8081' }}
          export HTTP_PORT=${{ secrets.STAGING_HTTP_PORT || '8081' }}
          export HTTPS_PORT=${{ secrets.STAGING_HTTPS_PORT || '8444' }}
          export ENABLE_HTTPS=${{ secrets.STAGING_ENABLE_HTTPS || 'true' }}
          export STUN_SERVER='${{ secrets.STAGING_STUN_SERVER || 'stun:stun.l.google.com:19302' }}'
          export TOKEN_EXPIRY='${{ secrets.STAGING_TOKEN_EXPIRY || '15m' }}'
          export TLS_CERT_FILE='${{ secrets.STAGING_TLS_CERT_FILE || '/certs/server.crt' }}'
          export TLS_KEY_FILE='${{ secrets.STAGING_TLS_KEY_FILE || '/certs/server.key' }}'

          # Build and start containers with environment variables
          docker compose up -d --build

          # Wait for containers to be ready
          sleep 15

          # Check if containers are running
          if docker compose ps | grep -q 'Up'; then
            echo '‚úÖ Staging deployment successful'
            echo 'üåê Staging HTTP: http://${{ secrets.STAGING_SERVER_HOST }}:8081'
            echo 'üîí Staging HTTPS: https://${{ secrets.STAGING_SERVER_HOST }}:8444'
          else
            echo '‚ùå Staging deployment failed'
            docker compose logs
            exit 1
          fi
        "

    - name: üìä Staging deployment summary
      run: |
        echo "üé≠ Staging deployment completed!"
        echo "üìÖ Deployed at: $(date)"
        echo "üåê Server: ${{ secrets.STAGING_SERVER_HOST }}"
        echo "üìÇ Path: ${{ secrets.STAGING_DEPLOY_PATH }}"
        echo "üê≥ Deployment: Docker Compose"
        echo "üì± HTTP: http://${{ secrets.STAGING_SERVER_HOST }}:8081"
        echo "üîí HTTPS: https://${{ secrets.STAGING_SERVER_HOST }}:8444"