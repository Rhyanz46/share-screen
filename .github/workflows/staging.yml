name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  GO_VERSION: '1.23.3'

jobs:
  # Test First
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 📥 Download dependencies
      run: go mod download

    - name: 🧪 Run tests
      run: go test -v -race ./...

    - name: 🏗️ Test build
      run: go build -v ./...

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: success() || github.event.inputs.force_deploy == 'true'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

    - name: 🌐 Add staging server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.STAGING_SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: 📤 Deploy to staging server
      run: |
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }} "
          # Create deployment directory
          sudo mkdir -p ${{ secrets.STAGING_DEPLOY_PATH }}
          sudo chown ${{ secrets.STAGING_SSH_USER }}:${{ secrets.STAGING_SSH_USER }} ${{ secrets.STAGING_DEPLOY_PATH }}
        "

        # Copy files
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='coverage.*' \
          --exclude='*.test' \
          ./ ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }}:${{ secrets.STAGING_DEPLOY_PATH }}/

        # Build and deploy
        ssh ${{ secrets.STAGING_SSH_USER }}@${{ secrets.STAGING_SERVER_HOST }} "
          cd ${{ secrets.STAGING_DEPLOY_PATH }}

          # Build application
          go mod download
          go build -o bin/share-screen .

          # Generate certificates if needed
          if [ ! -f certs/server.crt ]; then
            mkdir -p certs
            chmod +x scripts/generate-certs.sh
            ./scripts/generate-certs.sh
          fi

          # Setup staging systemd service
          sudo tee /etc/systemd/system/share-screen-staging.service > /dev/null << 'EOF'
        [Unit]
        Description=Share Screen Application (Staging)
        After=network.target

        [Service]
        Type=simple
        User=${{ secrets.STAGING_SSH_USER }}
        WorkingDirectory=${{ secrets.STAGING_DEPLOY_PATH }}
        ExecStart=${{ secrets.STAGING_DEPLOY_PATH }}/bin/share-screen
        Environment=PORT=8081
        Environment=ENABLE_HTTPS=true
        Environment=TLS_CERT_FILE=${{ secrets.STAGING_DEPLOY_PATH }}/certs/server.crt
        Environment=TLS_KEY_FILE=${{ secrets.STAGING_DEPLOY_PATH }}/certs/server.key
        Environment=STUN_SERVER=stun:stun.l.google.com:19302
        Environment=TOKEN_EXPIRY=15m
        Restart=always
        RestartSec=5
        StandardOutput=journal
        StandardError=journal

        [Install]
        WantedBy=multi-user.target
        EOF

          # Restart staging service
          sudo systemctl daemon-reload
          sudo systemctl enable share-screen-staging
          sudo systemctl restart share-screen-staging

          # Wait and check status
          sleep 5
          if sudo systemctl is-active --quiet share-screen-staging; then
            echo '✅ Staging deployment successful'
            echo '🌐 Staging URL: http://${{ secrets.STAGING_SERVER_HOST }}:8081'
          else
            echo '❌ Staging deployment failed'
            sudo journalctl -u share-screen-staging --no-pager -l
            exit 1
          fi
        "

    - name: 📊 Staging deployment summary
      run: |
        echo "🎭 Staging deployment completed!"
        echo "🌐 URL: http://${{ secrets.STAGING_SERVER_HOST }}:8081"
        echo "🌐 HTTPS: https://${{ secrets.STAGING_SERVER_HOST }}:8444"
        echo "📅 Deployed at: $(date)"